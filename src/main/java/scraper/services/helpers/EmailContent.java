package scraper.services.helpers;

import jakarta.mail.MessagingException;
import jakarta.mail.Multipart;
import jakarta.mail.internet.MimeBodyPart;
import jakarta.mail.internet.MimeMultipart;
import scraper.config.Env;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class EmailContent {

    private final static String TEXT_CONTENT = "Files generated by the scraper are" +
            " ready for download.\n" +
            "Files parsed at: ";

    private final static String SUBJECT = "Files are ready";


    public static String getSubject() {
        return SUBJECT;
    }

    public static Multipart getMimeMultipart() throws MessagingException {
        String textContent = TEXT_CONTENT + Instant.now().toString();

        Multipart multipart = new MimeMultipart();

        MimeBodyPart messageBodyPart = new MimeBodyPart();
        messageBodyPart.setContent(textContent, "text/html; charset=utf-8");

        List<MimeBodyPart> attachments = getAttachments();
        for (MimeBodyPart attachment : attachments) {
            multipart.addBodyPart(attachment);
        }

        multipart.addBodyPart(messageBodyPart);

        return multipart;
    }

    private static List<MimeBodyPart> getAttachments() {
        List<Path> paths = getFilePathsFromDirectory();
        List<MimeBodyPart> attachments = new ArrayList<>();

        for (Path path : paths) {
            try {
                MimeBodyPart attachment = new MimeBodyPart();
                attachment.attachFile(new File(path.toString()));

                attachments.add(attachment);
            } catch (IOException | MessagingException e) {
                throw new RuntimeException(e);
            }
        }

        if (attachments.isEmpty()) {
            throw new NoSuchElementException("Attachments could not be retrieved");
        }

        return attachments;
    }

    private static List<Path> getFilePathsFromDirectory() {
        try (Stream<Path> paths = Files.list(Paths.get(Env.getDownloadsDir()))) {
            return paths.filter(Files::isRegularFile)
                    .collect(Collectors.toList());

        } catch (IOException e) {
            throw new RuntimeException("Error listing files", e);
        }
    }
}
